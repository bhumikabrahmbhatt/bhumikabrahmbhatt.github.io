(function (d3$1) {
  'use strict';

  const colors = [
    ['#E6A6B0'],
    ['#F4CAAF'],
    ['#719D93'],
    ['#A6D096'],
    ['#9D4452'],
    ['#A76C48'],
    ['#2E6B5E'],
    ['#538E3D'],
    ['#BE6B78'],
    ['#C99372'],
    ['#498175'],
    ['#75AC61'],
    ['#812836'],
    ['#884E2A'],
    ['#1B584A'],
    ['#3A7424'],
    ['#5B0D1A'],
    ['#602E0E'],
    ['#093E32'],
    ['#1F520C'],  
  ];

  const samples = {
     "agents_log": {
          "A":[],
          "B":[
             {
                "date_time":"2022-05-05 14:23:45:579726",
                "metric_str":"content_trust.direct_experience",
                "other_agent":"A",
                "resource_id":"http://example.com/Redecentralization_of_the_Web",
                "trust_value":"0.0"
             },
             {
                "date_time":"2022-05-05 14:23:45:588587",
                "metric_str":"content_trust.recommendation",
                "other_agent":"A",
                "resource_id":"http://example.com/Redecentralization_of_the_Web",
                "trust_value":"None"
             },
             {
                "date_time":"2022-05-05 14:23:45:599123",
                "metric_str":"content_trust.popularity",
                "other_agent":"A",
                "resource_id":"http://example.com/Redecentralization_of_the_Web",
                "trust_value":"0.5"
             },
             {
                "date_time":"2022-05-05 14:23:45:618727",
                "metric_str":"content_trust.direct_experience",
                "other_agent":"A",
                "resource_id":"http://example.com/Web_of_Things",
                "trust_value":"None"
             },
             {
                "date_time":"2022-05-05 14:23:45:626127",
                "metric_str":"content_trust.recommendation",
                "other_agent":"A",
                "resource_id":"http://example.com/Web_of_Things",
                "trust_value":"None"
             },
             {
                "date_time":"2022-05-05 14:23:45:635072",
                "metric_str":"content_trust.popularity",
                "other_agent":"A",
                "resource_id":"http://example.com/Web_of_Things",
                "trust_value":"0.5"
             }
          ],
          "C":[],
          "D":[]
       },
      "trustLogDict": [
          {
             "date_time":"2022-05-05 14:23:45:601913",
             "agent":"B",
             "other_agent":"A",
             "resource_id":"http://example.com/Redecentralization_of_the_Web",
             "trust_value":"0.25"
          },
          {
             "date_time":"2022-05-05 14:23:45:639594",
             "agent":"B",
             "other_agent":"A",
             "resource_id":"http://example.com/Web_of_Things",
             "trust_value":"0.5"
          }
      ]
     };

  const nodes = [];
  const links = [];

  let i = 0;

  const addMainNode = (node) => {
    node.size = 20;
    node.color = colors[i++][0];
    nodes.push(node);
  };

  const addChildNode = (
    parentNode,
    childNode,
    selectagent,
    size = 15,
    distance = 20
  ) => {
    childNode.size = size;
    childNode.color = parentNode.color;
    childNode.selectedagent = selectagent;
    nodes.push(childNode);
    links.push({
      source: parentNode,
      target: childNode,
      distance,
      color: parentNode.color,
    });
  };

  const assembleChildNode = (parentNode, id, addnode, reso, selectagent) => { 
    const childNode = { id };
    addChildNode(parentNode, childNode, selectagent);

    const agents = samples.agents_log[addnode];
    for (let i = 0; i < samples.agents_log[addnode].length; i++) {
      if(agents[i].other_agent === parentNode.id && agents[i].resource_id === reso){
        addChildNode(childNode, { id: '' }, agents[i], 5 , 30);
      }
      continue;
    }
  };

  const connectMainNodes = (source, target) => {
    links.push({
      source,
      target,
      distance: 90,
      color: source.color
    });
  };

  const allagents = Object.keys(samples.agents_log);

  let castp = [];
  allagents.forEach((element, index) => {
    castp[index] = { id: element };
    addMainNode(castp[index]);
  });

  for (let i = 0; i < samples.trustLogDict.length; i++) {
    const first = castp.findIndex(element => element.id === samples.trustLogDict[i].agent);
    const second = castp.findIndex(element => element.id === samples.trustLogDict[i].other_agent);

    connectMainNodes(castp[first], castp[second]);

    let str = samples.trustLogDict[i].resource_id;
    let pp = samples.trustLogDict[i];
    assembleChildNode(castp[second], str.charAt(0),castp[first].id, str, pp);
  }

  const svg = d3.select('#container');
  const width = +svg.attr('width');
  const height = +svg.attr('height');
  const centerX = width / 2;
  const centerY = height / 2;

  var rangeSlider = document.getElementById('myRange');
  rangeSlider.addEventListener('change', function(event,a,b) {
    simulation.force("link").links(links).distance(event.target.value);
    simulation.alpha(1);
    simulation.restart();
  });

  const simulation = d3.forceSimulation(nodes)
    .force('charge', d3.forceManyBody().strength(-20))
    .force(
      'link',
      d3.forceLink(links).distance(rangeSlider.value) // (link) => link.distance
    )
    .force('center', d3.forceCenter(centerX, centerY));

  const dragInteraction = d3.drag().on('drag', (event, node) => {
    node.fx = event.x;
    node.fy = event.y;
    simulation.alpha(1);
    simulation.restart();
  });

  const lines = svg
    .selectAll('line')
    .data(links)
    .enter()
    .append('line')
    .attr('stroke', (link) => link.color || 'black');


  const circles = svg
    .append("g")
    .attr("class", "circles")
    .selectAll('circle')
    .data(nodes)
    .enter()
    .append('circle')
    .attr('fill', (node) => node.color || 'gray')
    .attr('r', (node) => node.size)
    .call(dragInteraction);

  d3.select("#allagents").selectAll("p").data(allagents).enter()
  .append("text")
  .text(function(ag){
      return ag+" ";
  });

  circles.on("click", function(d, agent) {
    if(agent.selectedagent === undefined){
      d3.select("#selectedagent").text(agent.id);
    }
    else {
      if(agent.selectedagent.metric_str === undefined){
        d3.select("#trustlog").style('display', 'block');
        d3.select("#agentlog").style('display', 'none');

        d3.select("#agent").text(agent.selectedagent.agent);
        d3.select("#datetime").text(agent.selectedagent.date_time);
        d3.select("#otheragent").text(agent.selectedagent.other_agent);
        d3.select("#resourceid").text(agent.selectedagent.resource_id);
        d3.select("#trustvalue").text(agent.selectedagent.trust_value);
      }
      else {
        d3.select("#agentlog").style('display', 'block');
        d3.select("#trustlog").style('display', 'none');

        d3.select("#adatetime").text(agent.selectedagent.date_time);
        d3.select("#metricstring").text(agent.selectedagent.metric_str);
        d3.select("#aotheragent").text(agent.selectedagent.other_agent);
        d3.select("#aresourceid").text(agent.selectedagent.resource_id);
        d3.select("#atrustvalue").text(agent.selectedagent.trust_value);
      }  
    }
  });

  const text = svg
    .selectAll('text')
    .data(nodes)
    .enter()
    .append('text')
    .attr('text-anchor', 'middle')
    .attr('alignment-baseline', 'middle')
    .style('pointer-events', 'none')
    .text((node) => node.id);

  simulation.on('tick', () => {
    circles.attr('cx', (node) => node.x).attr('cy', (node) => node.y);
    text.attr('x', (node) => node.x).attr('y', (node) => node.y);

    lines
      .attr('x1', (link) => link.source.x)
      .attr('y1', (link) => link.source.y)
      .attr('x2', (link) => link.target.x)
      .attr('y2', (link) => link.target.y);
  });


  var zoom_handler = d3.zoom()
    .on("zoom", zoom_actions);

  function zoom_actions(){
     circles.attr("transform", d3.zoomTransform(this));
     lines.attr("transform", d3.zoomTransform(this));
     text.attr("transform", d3.zoomTransform(this));
  }

  zoom_handler(svg);    

  // zoomIn
  d3.select("#zoomIn").on("click", function() {
    d3.select('svg')
      .transition()
      .call(zoom_handler.scaleBy, 2);
  });

  // zoomOut
  d3.select("#zoomOut").on("click", function() {
    d3.select('svg')
      .transition()
      .call(zoom_handler.scaleBy, 0.5);
  });

  // resetZoom
  d3.select("#resetZoom").on("click", function() {
    d3.select('svg')
      .transition()
      .call(zoom_handler.scaleTo, 1);
  });

  // center
  d3.select("#center").on("click", function() {
    d3.select('svg')
      .transition()
      .call(zoom_handler.translateTo, 0.5 * width, 0.5 * height);
  });

  // panLeft
  d3.select("#panLeft").on("click", function() {
    d3.select('svg')
      .transition()
      .call(zoom_handler.translateBy, -50, 0);
  });

  // panRight
  d3.select("#panRight").on("click", function() {
    d3.select('svg')
      .transition()
      .call(zoom_handler.translateBy, 50, 0);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,