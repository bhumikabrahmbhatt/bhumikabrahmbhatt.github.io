(function (d3) {
  'use strict';

  // Generated with https://paletton.com/#uid=75x0u0kigkU8ZuBdTpdmbh6rjc7
  const colors = [
    ['#9D4452', '#E6A6B0', '#BE6B78', '#812836', '#5B0D1A'],
    ['#A76C48', '#F4CAAF', '#C99372', '#884E2A', '#602E0E'],
    ['#2E6B5E', '#719D93', '#498175', '#1B584A', '#093E32'],
    ['#538E3D', '#A6D096', '#75AC61', '#3A7424', '#1F520C'],
  ];

  const nodes = [];
  const links = [];

  const MAIN_NODE_SIZE = 20;
  const CHILD_NODE_SIZE = 15;
  const LEAF_NODE_SIZE = 5;
  const DEFAULT_DISTANCE = 20;
  const MAIN_NODE_DISTANCE = 50;
  const LEAF_NODE_DISTANCE = 30;
  const MANY_BODY_STRENGTH = -20;
   
  let i = 0;
  const addMainNode = (node) => {
    node.size = MAIN_NODE_SIZE;
    node.color = colors[i++][1];
    nodes.push(node);
  };

  const addChildNode = (
    parentNode,
    childNode,
    size = CHILD_NODE_SIZE,
    distance = DEFAULT_DISTANCE
  ) => {
    childNode.size = size;
    childNode.color = parentNode.color;
    nodes.push(childNode);
    links.push({
      source: parentNode,
      target: childNode,
      distance,
      color: parentNode.color,
    });
  };

  const assembleChildNode = (parentNode, id, numLeaves = 3) => {
    const childNode = { id };
    addChildNode(parentNode, childNode);

    for (let i = 0; i < numLeaves; i++) {
      addChildNode(childNode, { id: '' }, LEAF_NODE_SIZE, LEAF_NODE_DISTANCE);
    }
  };

  const connectMainNodes = (source, target) => {
    links.push({
      source,
      target,
      distance: MAIN_NODE_DISTANCE,
      color: source.color
    });
  };

  // TEST B 10
  // e trust f in one resource
  // B trust f in different resource
  // g trust f in different resource

  // artsweb is the data which has trustlog for other agent or which has array of data in agents log.
  const artsWeb = { id: 'B' };
  addMainNode(artsWeb);
  // assembleChildNode(artsWeb, 'Community Vision');
  // assembleChildNode(artsWeb, 'Silicon Valley Creates');

  // socialImpactCommons is the first data which is trusted by artsweb (B). The array of A can/cannot be null in agents log.
  const socialImpactCommons = { id: 'A' };
  addMainNode(socialImpactCommons);
  assembleChildNode(socialImpactCommons, 'R1');
  assembleChildNode(socialImpactCommons, 'R2');
  assembleChildNode(socialImpactCommons, 'R3');

  // cast is the second data which is trusted by artsweb (B). The array of C can/cannot be null in agents log.
  const cast = { id: 'C' };
  addMainNode(cast);
  assembleChildNode(cast, 'R1');
  assembleChildNode(cast, 'R2');
  assembleChildNode(cast, 'R3', 3);

  // ambitioUS is the data which is not trusted by artsweb (B). The array of D can/cannot be null in agents log.
  const ambitioUS = { id: 'D' };
  // addMainNode(ambitioUS);
  // assembleChildNode(ambitioUS, 'EBPREC');
  // assembleChildNode(ambitioUS, 'SELC', 3);
  // assembleChildNode(ambitioUS, 'The Runway Project', 3);
  // assembleChildNode(ambitioUS, 'Common Future', 3);
  // assembleChildNode(ambitioUS, 'Freelancers Union', 3);
  // assembleChildNode(ambitioUS, 'US Federation of Worker Cooperatives', 3);

  // connectMainNodes(socialImpactCommons, artsWeb); This does not matter. B to A or A to B is same.
  connectMainNodes(artsWeb, socialImpactCommons);
  connectMainNodes(artsWeb, cast);
  // connectMainNodes(artsWeb, ambitioUS);
  // connectMainNodes(socialImpactCommons, cast);
  // connectMainNodes(ambitioUS, cast);
  // connectMainNodes(ambitioUS, socialImpactCommons);
  // connectMainNodes(ambitioUS, artsWeb);

  const svg = d3.select('#container');
  const width = +svg.attr('width');
  const height = +svg.attr('height');
  const centerX = width / 2;
  const centerY = height / 2;

  const simulation = d3.forceSimulation(nodes)
    .force('charge', d3.forceManyBody().strength(MANY_BODY_STRENGTH))
    .force(
      'link',
      d3.forceLink(links).distance((link) => link.distance)
    )
    .force('center', d3.forceCenter(centerX, centerY));

  const dragInteraction = d3.drag().on('drag', (event, node) => {
    node.fx = event.x;
    node.fy = event.y;
    simulation.alpha(1);
    simulation.restart();
  });


  const lines = svg
    .selectAll('line')
    .data(links)
    .enter()
    .append('line')
    .attr('stroke', (link) => link.color || 'black');


  const circles = svg
    .selectAll('circle')
    .data(nodes)
    .enter()
    .append('circle')
    .attr('fill', (node) => node.color || 'gray')
    .attr('r', (node) => node.size)
    .call(dragInteraction);

  const text = svg
    .selectAll('text')
    .data(nodes)
    .enter()
    .append('text')
    .attr('text-anchor', 'middle')
    .attr('alignment-baseline', 'middle')
    .style('pointer-events', 'none')
    .text((node) => node.id);

  simulation.on('tick', () => {
    circles.attr('cx', (node) => node.x).attr('cy', (node) => node.y);
    text.attr('x', (node) => node.x).attr('y', (node) => node.y);

    lines
      .attr('x1', (link) => link.source.x)
      .attr('y1', (link) => link.source.y)
      .attr('x2', (link) => link.target.x)
      .attr('y2', (link) => link.target.y);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImNvbG9ycy5qcyIsImRhdGEuanMiLCJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgd2l0aCBodHRwczovL3BhbGV0dG9uLmNvbS8jdWlkPTc1eDB1MGtpZ2tVOFp1QmRUcGRtYmg2cmpjN1xuZXhwb3J0IGNvbnN0IGNvbG9ycyA9IFtcbiAgWycjOUQ0NDUyJywgJyNFNkE2QjAnLCAnI0JFNkI3OCcsICcjODEyODM2JywgJyM1QjBEMUEnXSxcbiAgWycjQTc2QzQ4JywgJyNGNENBQUYnLCAnI0M5OTM3MicsICcjODg0RTJBJywgJyM2MDJFMEUnXSxcbiAgWycjMkU2QjVFJywgJyM3MTlEOTMnLCAnIzQ5ODE3NScsICcjMUI1ODRBJywgJyMwOTNFMzInXSxcbiAgWycjNTM4RTNEJywgJyNBNkQwOTYnLCAnIzc1QUM2MScsICcjM0E3NDI0JywgJyMxRjUyMEMnXSxcbl07XG4iLCJpbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2NvbG9ycyc7XG5cbmV4cG9ydCBjb25zdCBub2RlcyA9IFtdO1xuZXhwb3J0IGNvbnN0IGxpbmtzID0gW107XG5cbmNvbnN0IE1BSU5fTk9ERV9TSVpFID0gNDA7XG5jb25zdCBDSElMRF9OT0RFX1NJWkUgPSAxNTtcbmNvbnN0IExFQUZfTk9ERV9TSVpFID0gNTtcbmNvbnN0IERFRkFVTFRfRElTVEFOQ0UgPSAyMDtcbmNvbnN0IE1BSU5fTk9ERV9ESVNUQU5DRSA9IDkwO1xuY29uc3QgTEVBRl9OT0RFX0RJU1RBTkNFID0gMzA7XG5leHBvcnQgY29uc3QgTUFOWV9CT0RZX1NUUkVOR1RIID0gLTIwO1xuIFxubGV0IGkgPSAwO1xuY29uc3QgYWRkTWFpbk5vZGUgPSAobm9kZSkgPT4ge1xuICBub2RlLnNpemUgPSBNQUlOX05PREVfU0laRTtcbiAgbm9kZS5jb2xvciA9IGNvbG9yc1tpKytdWzFdO1xuICBub2Rlcy5wdXNoKG5vZGUpO1xufTtcblxuY29uc3QgYWRkQ2hpbGROb2RlID0gKFxuICBwYXJlbnROb2RlLFxuICBjaGlsZE5vZGUsXG4gIHNpemUgPSBDSElMRF9OT0RFX1NJWkUsXG4gIGRpc3RhbmNlID0gREVGQVVMVF9ESVNUQU5DRVxuKSA9PiB7XG4gIGNoaWxkTm9kZS5zaXplID0gc2l6ZTtcbiAgY2hpbGROb2RlLmNvbG9yID0gcGFyZW50Tm9kZS5jb2xvcjtcbiAgbm9kZXMucHVzaChjaGlsZE5vZGUpO1xuICBsaW5rcy5wdXNoKHtcbiAgICBzb3VyY2U6IHBhcmVudE5vZGUsXG4gICAgdGFyZ2V0OiBjaGlsZE5vZGUsXG4gICAgZGlzdGFuY2UsXG4gICAgY29sb3I6IHBhcmVudE5vZGUuY29sb3IsXG4gIH0pO1xufTtcblxuY29uc3QgYXNzZW1ibGVDaGlsZE5vZGUgPSAocGFyZW50Tm9kZSwgaWQsIG51bUxlYXZlcyA9IDIwKSA9PiB7XG4gIGNvbnN0IGNoaWxkTm9kZSA9IHsgaWQgfTtcbiAgYWRkQ2hpbGROb2RlKHBhcmVudE5vZGUsIGNoaWxkTm9kZSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1MZWF2ZXM7IGkrKykge1xuICAgIGFkZENoaWxkTm9kZShjaGlsZE5vZGUsIHsgaWQ6ICcnIH0sIExFQUZfTk9ERV9TSVpFLCBMRUFGX05PREVfRElTVEFOQ0UpO1xuICB9XG59O1xuXG5jb25zdCBjb25uZWN0TWFpbk5vZGVzID0gKHNvdXJjZSwgdGFyZ2V0KSA9PiB7XG4gIGxpbmtzLnB1c2goe1xuICAgIHNvdXJjZSxcbiAgICB0YXJnZXQsXG4gICAgZGlzdGFuY2U6IE1BSU5fTk9ERV9ESVNUQU5DRSxcbiAgICBjb2xvcjogc291cmNlLmNvbG9yXG4gIH0pO1xufTtcblxuY29uc3QgYXJ0c1dlYiA9IHsgaWQ6ICdBcnRzIFdlYicgfTtcbmFkZE1haW5Ob2RlKGFydHNXZWIpO1xuYXNzZW1ibGVDaGlsZE5vZGUoYXJ0c1dlYiwgJ0NvbW11bml0eSBWaXNpb24nKTtcbmFzc2VtYmxlQ2hpbGROb2RlKGFydHNXZWIsICdTaWxpY29uIFZhbGxleSBDcmVhdGVzJyk7XG5cbmNvbnN0IHNvY2lhbEltcGFjdENvbW1vbnMgPSB7IGlkOiAnU29jaWFsIEltcGFjdCBDb21tb25zJyB9O1xuYWRkTWFpbk5vZGUoc29jaWFsSW1wYWN0Q29tbW9ucyk7XG5hc3NlbWJsZUNoaWxkTm9kZShzb2NpYWxJbXBhY3RDb21tb25zLCAnVGhlYXRyZSBCYXkgQXJlYScpO1xuYXNzZW1ibGVDaGlsZE5vZGUoc29jaWFsSW1wYWN0Q29tbW9ucywgJ0Vhc3RTaWRlIEFydHMgQWxsaWFuY2UnKTtcbmFzc2VtYmxlQ2hpbGROb2RlKHNvY2lhbEltcGFjdENvbW1vbnMsICdMb2NhbCBDb2xvcicpO1xuXG5jb25zdCBjYXN0ID0geyBpZDogJ0NvbW11bml0eSBBcnRzIFN0YWJpbGl6YXRpb24gVHJ1c3QnIH07XG5hZGRNYWluTm9kZShjYXN0KTtcbmFzc2VtYmxlQ2hpbGROb2RlKGNhc3QsICdDb3VudGVyUHVsc2UnKTtcbmFzc2VtYmxlQ2hpbGROb2RlKGNhc3QsICdMdWdnYWdlIFN0b3JlIEdhbGxlcnknKTtcbmFzc2VtYmxlQ2hpbGROb2RlKGNhc3QsICdQZXJmb3JtaW5nIEFydHMgV29ya3Nob3AnKTtcbmFzc2VtYmxlQ2hpbGROb2RlKGNhc3QsICc0NDcgTWlubmEgU3QuJywgNSk7XG5hc3NlbWJsZUNoaWxkTm9kZShjYXN0LCAnS2VlcGluZyBTcGFjZSBPYWtsYW5kJyk7XG5cbmNvbnN0IGFtYml0aW9VUyA9IHsgaWQ6ICdBbWJpdGlvVVMnIH07XG5hZGRNYWluTm9kZShhbWJpdGlvVVMpO1xuYXNzZW1ibGVDaGlsZE5vZGUoYW1iaXRpb1VTLCAnRUJQUkVDJyk7XG5hc3NlbWJsZUNoaWxkTm9kZShhbWJpdGlvVVMsICdTRUxDJywgMyk7XG5hc3NlbWJsZUNoaWxkTm9kZShhbWJpdGlvVVMsICdUaGUgUnVud2F5IFByb2plY3QnLCAzKTtcbmFzc2VtYmxlQ2hpbGROb2RlKGFtYml0aW9VUywgJ0NvbW1vbiBGdXR1cmUnLCAzKTtcbmFzc2VtYmxlQ2hpbGROb2RlKGFtYml0aW9VUywgJ0ZyZWVsYW5jZXJzIFVuaW9uJywgMyk7XG5hc3NlbWJsZUNoaWxkTm9kZShhbWJpdGlvVVMsICdVUyBGZWRlcmF0aW9uIG9mIFdvcmtlciBDb29wZXJhdGl2ZXMnLCAzKTtcblxuY29ubmVjdE1haW5Ob2RlcyhhcnRzV2ViLCBzb2NpYWxJbXBhY3RDb21tb25zKTtcbmNvbm5lY3RNYWluTm9kZXMoYXJ0c1dlYiwgY2FzdCk7XG5jb25uZWN0TWFpbk5vZGVzKHNvY2lhbEltcGFjdENvbW1vbnMsIGNhc3QpO1xuY29ubmVjdE1haW5Ob2RlcyhhbWJpdGlvVVMsIGNhc3QpO1xuY29ubmVjdE1haW5Ob2RlcyhhbWJpdGlvVVMsIHNvY2lhbEltcGFjdENvbW1vbnMpO1xuY29ubmVjdE1haW5Ob2RlcyhhbWJpdGlvVVMsIGFydHNXZWIpO1xuIiwiaW1wb3J0IHtcbiAgc2VsZWN0LFxuICBmb3JjZVNpbXVsYXRpb24sXG4gIGZvcmNlTWFueUJvZHksXG4gIGZvcmNlTGluayxcbiAgZm9yY2VDZW50ZXIsXG4gIGRyYWcsXG59IGZyb20gJ2QzJztcblxuaW1wb3J0IHsgbm9kZXMsIGxpbmtzLCBNQU5ZX0JPRFlfU1RSRU5HVEggfSBmcm9tICcuL2RhdGEnO1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJyNjb250YWluZXInKTtcbmNvbnN0IHdpZHRoID0gK3N2Zy5hdHRyKCd3aWR0aCcpO1xuY29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKCdoZWlnaHQnKTtcbmNvbnN0IGNlbnRlclggPSB3aWR0aCAvIDI7XG5jb25zdCBjZW50ZXJZID0gaGVpZ2h0IC8gMjtcblxuY29uc3Qgc2ltdWxhdGlvbiA9IGZvcmNlU2ltdWxhdGlvbihub2RlcylcbiAgLmZvcmNlKCdjaGFyZ2UnLCBmb3JjZU1hbnlCb2R5KCkuc3RyZW5ndGgoTUFOWV9CT0RZX1NUUkVOR1RIKSlcbiAgLmZvcmNlKFxuICAgICdsaW5rJyxcbiAgICBmb3JjZUxpbmsobGlua3MpLmRpc3RhbmNlKChsaW5rKSA9PiBsaW5rLmRpc3RhbmNlKVxuICApXG4gIC5mb3JjZSgnY2VudGVyJywgZm9yY2VDZW50ZXIoY2VudGVyWCwgY2VudGVyWSkpO1xuXG5jb25zdCBkcmFnSW50ZXJhY3Rpb24gPSBkcmFnKCkub24oJ2RyYWcnLCAoZXZlbnQsIG5vZGUpID0+IHtcbiAgbm9kZS5meCA9IGV2ZW50Lng7XG4gIG5vZGUuZnkgPSBldmVudC55O1xuICBzaW11bGF0aW9uLmFscGhhKDEpO1xuICBzaW11bGF0aW9uLnJlc3RhcnQoKTtcbn0pO1xuXG5cbmNvbnN0IGxpbmVzID0gc3ZnXG4gIC5zZWxlY3RBbGwoJ2xpbmUnKVxuICAuZGF0YShsaW5rcylcbiAgLmVudGVyKClcbiAgLmFwcGVuZCgnbGluZScpXG4gIC5hdHRyKCdzdHJva2UnLCAobGluaykgPT4gbGluay5jb2xvciB8fCAnYmxhY2snKTtcblxuXG5jb25zdCBjaXJjbGVzID0gc3ZnXG4gIC5zZWxlY3RBbGwoJ2NpcmNsZScpXG4gIC5kYXRhKG5vZGVzKVxuICAuZW50ZXIoKVxuICAuYXBwZW5kKCdjaXJjbGUnKVxuICAuYXR0cignZmlsbCcsIChub2RlKSA9PiBub2RlLmNvbG9yIHx8ICdncmF5JylcbiAgLmF0dHIoJ3InLCAobm9kZSkgPT4gbm9kZS5zaXplKVxuICAuY2FsbChkcmFnSW50ZXJhY3Rpb24pO1xuXG5jb25zdCB0ZXh0ID0gc3ZnXG4gIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAuZGF0YShub2RlcylcbiAgLmVudGVyKClcbiAgLmFwcGVuZCgndGV4dCcpXG4gIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAuYXR0cignYWxpZ25tZW50LWJhc2VsaW5lJywgJ21pZGRsZScpXG4gIC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnbm9uZScpXG4gIC50ZXh0KChub2RlKSA9PiBub2RlLmlkKTtcblxuc2ltdWxhdGlvbi5vbigndGljaycsICgpID0+IHtcbiAgY2lyY2xlcy5hdHRyKCdjeCcsIChub2RlKSA9PiBub2RlLngpLmF0dHIoJ2N5JywgKG5vZGUpID0+IG5vZGUueSk7XG4gIHRleHQuYXR0cigneCcsIChub2RlKSA9PiBub2RlLngpLmF0dHIoJ3knLCAobm9kZSkgPT4gbm9kZS55KTtcblxuICBsaW5lc1xuICAgIC5hdHRyKCd4MScsIChsaW5rKSA9PiBsaW5rLnNvdXJjZS54KVxuICAgIC5hdHRyKCd5MScsIChsaW5rKSA9PiBsaW5rLnNvdXJjZS55KVxuICAgIC5hdHRyKCd4MicsIChsaW5rKSA9PiBsaW5rLnRhcmdldC54KVxuICAgIC5hdHRyKCd5MicsIChsaW5rKSA9PiBsaW5rLnRhcmdldC55KTtcbn0pO1xuIl0sIm5hbWVzIjpbInNlbGVjdCIsImZvcmNlU2ltdWxhdGlvbiIsImZvcmNlTWFueUJvZHkiLCJmb3JjZUxpbmsiLCJmb3JjZUNlbnRlciIsImRyYWciXSwibWFwcGluZ3MiOiI7OztFQUFBO0VBQ08sTUFBTSxNQUFNLEdBQUc7RUFDdEIsRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7RUFDekQsRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7RUFDekQsRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7RUFDekQsRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7RUFDekQsQ0FBQzs7RUNKTSxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7RUFDakIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ3hCO0VBQ0EsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDO0VBQzFCLE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQztFQUMzQixNQUFNLGNBQWMsR0FBRyxDQUFDLENBQUM7RUFDekIsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7RUFDNUIsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUM7RUFDOUIsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUM7RUFDdkIsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQUUsQ0FBQztFQUN0QztFQUNBLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNWLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBSSxLQUFLO0VBQzlCLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUM7RUFDN0IsRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzlCLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUNuQixDQUFDLENBQUM7QUFDRjtFQUNBLE1BQU0sWUFBWSxHQUFHO0VBQ3JCLEVBQUUsVUFBVTtFQUNaLEVBQUUsU0FBUztFQUNYLEVBQUUsSUFBSSxHQUFHLGVBQWU7RUFDeEIsRUFBRSxRQUFRLEdBQUcsZ0JBQWdCO0VBQzdCLEtBQUs7RUFDTCxFQUFFLFNBQVMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQ3hCLEVBQUUsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO0VBQ3JDLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztFQUN4QixFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUM7RUFDYixJQUFJLE1BQU0sRUFBRSxVQUFVO0VBQ3RCLElBQUksTUFBTSxFQUFFLFNBQVM7RUFDckIsSUFBSSxRQUFRO0VBQ1osSUFBSSxLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUs7RUFDM0IsR0FBRyxDQUFDLENBQUM7RUFDTCxDQUFDLENBQUM7QUFDRjtFQUNBLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUFFLFNBQVMsR0FBRyxFQUFFLEtBQUs7RUFDOUQsRUFBRSxNQUFNLFNBQVMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDO0VBQzNCLEVBQUUsWUFBWSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN0QztFQUNBLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRTtFQUN0QyxJQUFJLFlBQVksQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUM7RUFDNUUsR0FBRztFQUNILENBQUMsQ0FBQztBQUNGO0VBQ0EsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEtBQUs7RUFDN0MsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDO0VBQ2IsSUFBSSxNQUFNO0VBQ1YsSUFBSSxNQUFNO0VBQ1YsSUFBSSxRQUFRLEVBQUUsa0JBQWtCO0VBQ2hDLElBQUksS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO0VBQ3ZCLEdBQUcsQ0FBQyxDQUFDO0VBQ0wsQ0FBQyxDQUFDO0FBQ0Y7RUFDQSxNQUFNLE9BQU8sR0FBRyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQztFQUNuQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDckIsaUJBQWlCLENBQUMsT0FBTyxFQUFFLGtCQUFrQixDQUFDLENBQUM7RUFDL0MsaUJBQWlCLENBQUMsT0FBTyxFQUFFLHdCQUF3QixDQUFDLENBQUM7QUFDckQ7RUFDQSxNQUFNLG1CQUFtQixHQUFHLEVBQUUsRUFBRSxFQUFFLHVCQUF1QixFQUFFLENBQUM7RUFDNUQsV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUM7RUFDakMsaUJBQWlCLENBQUMsbUJBQW1CLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztFQUMzRCxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO0VBQ2pFLGlCQUFpQixDQUFDLG1CQUFtQixFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3REO0VBQ0EsTUFBTSxJQUFJLEdBQUcsRUFBRSxFQUFFLEVBQUUsb0NBQW9DLEVBQUUsQ0FBQztFQUMxRCxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDbEIsaUJBQWlCLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0VBQ3hDLGlCQUFpQixDQUFDLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO0VBQ2pELGlCQUFpQixDQUFDLElBQUksRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO0VBQ3BELGlCQUFpQixDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDNUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLENBQUM7QUFDakQ7RUFDQSxNQUFNLFNBQVMsR0FBRyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsQ0FBQztFQUN0QyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7RUFDdkIsaUJBQWlCLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0VBQ3ZDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDeEMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ3RELGlCQUFpQixDQUFDLFNBQVMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDakQsaUJBQWlCLENBQUMsU0FBUyxFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ3JELGlCQUFpQixDQUFDLFNBQVMsRUFBRSxzQ0FBc0MsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN4RTtFQUNBLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0VBQy9DLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztFQUNoQyxnQkFBZ0IsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztFQUM1QyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFDbEMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLG1CQUFtQixDQUFDLENBQUM7RUFDakQsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQzs7RUM3RXBDLE1BQU0sR0FBRyxHQUFHQSxTQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7RUFDakMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pDLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUNuQyxNQUFNLE9BQU8sR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0VBQzFCLE1BQU0sT0FBTyxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDM0I7RUFDQSxNQUFNLFVBQVUsR0FBR0Msa0JBQWUsQ0FBQyxLQUFLLENBQUM7RUFDekMsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFQyxnQkFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUM7RUFDaEUsR0FBRyxLQUFLO0VBQ1IsSUFBSSxNQUFNO0VBQ1YsSUFBSUMsWUFBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDO0VBQ3RELEdBQUc7RUFDSCxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUVDLGNBQVcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNsRDtFQUNBLE1BQU0sZUFBZSxHQUFHQyxPQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksS0FBSztFQUMzRCxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUNwQixFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUNwQixFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdEIsRUFBRSxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7RUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFDSDtBQUNBO0VBQ0EsTUFBTSxLQUFLLEdBQUcsR0FBRztFQUNqQixHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7RUFDcEIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0VBQ2QsR0FBRyxLQUFLLEVBQUU7RUFDVixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7RUFDakIsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLENBQUM7QUFDbkQ7QUFDQTtFQUNBLE1BQU0sT0FBTyxHQUFHLEdBQUc7RUFDbkIsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDO0VBQ3RCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztFQUNkLEdBQUcsS0FBSyxFQUFFO0VBQ1YsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0VBQ25CLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQztFQUMvQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQztFQUNqQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN6QjtFQUNBLE1BQU0sSUFBSSxHQUFHLEdBQUc7RUFDaEIsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO0VBQ3BCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztFQUNkLEdBQUcsS0FBSyxFQUFFO0VBQ1YsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0VBQ2pCLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUM7RUFDaEMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxDQUFDO0VBQ3ZDLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQztFQUNsQyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0I7RUFDQSxVQUFVLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNO0VBQzVCLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3BFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9EO0VBQ0EsRUFBRSxLQUFLO0VBQ1AsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ3hDLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUN4QyxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDeEMsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDekMsQ0FBQyxDQUFDOzs7OyJ9