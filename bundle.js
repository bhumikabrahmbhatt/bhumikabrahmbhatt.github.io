(function (d3) {
  'use strict';

  // Generated with https://paletton.com/#uid=75x0u0kigkU8ZuBdTpdmbh6rjc7
  const colors = [
    ['#9D4452', '#E6A6B0', '#BE6B78', '#812836', '#5B0D1A'],
    ['#A76C48', '#F4CAAF', '#C99372', '#884E2A', '#602E0E'],
    ['#2E6B5E', '#719D93', '#498175', '#1B584A', '#093E32'],
    ['#538E3D', '#A6D096', '#75AC61', '#3A7424', '#1F520C'],
  ];

  const samples = {
     "agents_log": {
          "A":[],
          "B":[
             {
                "date_time":"2022-05-05 14:23:45:579726",
                "metric_str":"content_trust.direct_experience",
                "other_agent":"A",
                "resource_id":"http://example.com/Redecentralization_of_the_Web",
                "trust_value":"0.0"
             },
             {
                "date_time":"2022-05-05 14:23:45:588587",
                "metric_str":"content_trust.recommendation",
                "other_agent":"A",
                "resource_id":"http://example.com/Redecentralization_of_the_Web",
                "trust_value":"None"
             },
             {
                "date_time":"2022-05-05 14:23:45:599123",
                "metric_str":"content_trust.popularity",
                "other_agent":"A",
                "resource_id":"http://example.com/Redecentralization_of_the_Web",
                "trust_value":"0.5"
             },
             {
                "date_time":"2022-05-05 14:23:45:618727",
                "metric_str":"content_trust.direct_experience",
                "other_agent":"A",
                "resource_id":"http://example.com/Web_of_Things",
                "trust_value":"None"
             },
             {
                "date_time":"2022-05-05 14:23:45:626127",
                "metric_str":"content_trust.recommendation",
                "other_agent":"A",
                "resource_id":"http://example.com/Web_of_Things",
                "trust_value":"None"
             },
             {
                "date_time":"2022-05-05 14:23:45:635072",
                "metric_str":"content_trust.popularity",
                "other_agent":"A",
                "resource_id":"http://example.com/Web_of_Things",
                "trust_value":"0.5"
             }
          ],
          "C":[],
          "D":[]
       },
      "trustLogDict": [
          {
             "date_time":"2022-05-05 14:23:45:601913",
             "agent":"B",
             "other_agent":"A",
             "resource_id":"http://example.com/Redecentralization_of_the_Web",
             "trust_value":"0.25"
          },
          {
             "date_time":"2022-05-05 14:23:45:639594",
             "agent":"B",
             "other_agent":"A",
             "resource_id":"http://example.com/Web_of_Things",
             "trust_value":"0.5"
          }
      ]
     };

  const nodes = [];
  const links = [];

  const MAIN_NODE_SIZE = 40;
  const CHILD_NODE_SIZE = 15;
  const LEAF_NODE_SIZE = 5;
  const DEFAULT_DISTANCE = 20;
  const MAIN_NODE_DISTANCE = 90;
  const LEAF_NODE_DISTANCE = 30;
  const MANY_BODY_STRENGTH = -20;

  let i = 0;

  const addMainNode = (node) => {
    node.size = MAIN_NODE_SIZE;
    node.color = colors[i++][1];
    nodes.push(node);
  };

  const addChildNode = (
    parentNode,
    childNode,
    size = CHILD_NODE_SIZE,
    distance = DEFAULT_DISTANCE
  ) => {
    childNode.size = size;
    childNode.color = parentNode.color;
    nodes.push(childNode);
    links.push({
      source: parentNode,
      target: childNode,
      distance,
      color: parentNode.color,
    });
  };

  const assembleChildNode = (parentNode, id, addnode, reso) => {
      const childNode = { id };
      addChildNode(parentNode, childNode);
      const agents = samples.agents_log[addnode];
    
      for (let i = 0; i < samples.agents_log[addnode].length; i++) {
        if(agents[i].other_agent === parentNode.id && agents[i].resource_id === reso){
          addChildNode(childNode, { id: '' }, LEAF_NODE_SIZE, LEAF_NODE_DISTANCE);
        }
        continue;
      }
  };

  const connectMainNodes = (source, target) => {
    links.push({
      source,
      target,
      distance: MAIN_NODE_DISTANCE,
      color: source.color
    });
  };

  const allagents = Object.keys(samples.agents_log);

  let castp = [];
  allagents.forEach((element, index) => {    
    castp[index] = { id: element };
    addMainNode(castp[index]);
  });

  for (let i = 0; i < samples.trustLogDict.length; i++) {
    
    const first = castp.findIndex(element => element.id === samples.trustLogDict[i].agent);
    const second = castp.findIndex(element => element.id === samples.trustLogDict[i].other_agent);
    
    connectMainNodes(castp[first], castp[second]); // if agent b , and other agent a, then find who's id is same
    
    let str = samples.trustLogDict[i].resource_id;
    assembleChildNode(castp[second], str.charAt(0),castp[first].id, str);
  }

  const svg = d3.select('#container');
  const width = +svg.attr('width');
  const height = +svg.attr('height');
  const centerX = width / 2;
  const centerY = height / 2;

  const simulation = d3.forceSimulation(nodes)
    .force('charge', d3.forceManyBody().strength(MANY_BODY_STRENGTH))
    .force(
      'link',
      d3.forceLink(links).distance((link) => link.distance)
    )
    .force('center', d3.forceCenter(centerX, centerY));

  const dragInteraction = d3.drag().on('drag', (event, node) => {
    node.fx = event.x;
    node.fy = event.y;
    simulation.alpha(1);
    simulation.restart();
  });


  const lines = svg
    .selectAll('line')
    .data(links)
    .enter()
    .append('line')
    .attr('stroke', (link) => link.color || 'black');


  const circles = svg
    .selectAll('circle')
    .data(nodes)
    .enter()
    .append('circle')
    .attr('fill', (node) => node.color || 'gray')
    .attr('r', (node) => node.size)
    .call(dragInteraction);

  const text = svg
    .selectAll('text')
    .data(nodes)
    .enter()
    .append('text')
    .attr('text-anchor', 'middle')
    .attr('alignment-baseline', 'middle')
    .style('pointer-events', 'none')
    .text((node) => node.id);

  simulation.on('tick', () => {
    circles.attr('cx', (node) => node.x).attr('cy', (node) => node.y);
    text.attr('x', (node) => node.x).attr('y', (node) => node.y);

    lines
      .attr('x1', (link) => link.source.x)
      .attr('y1', (link) => link.source.y)
      .attr('x2', (link) => link.target.x)
      .attr('y2', (link) => link.target.y);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,